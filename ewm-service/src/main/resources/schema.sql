CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email varchar(254),
    name  varchar(250),
    CONSTRAINT uq_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS category
(
    id   BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name varchar(50) NOT NULL,
    CONSTRAINT uq_category_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS event
(
    id                 BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    annotation         varchar(2000)               NOT NULL,
    category_id        integer                     NOT NULL,
    description        varchar(7000)               NOT NULL,
    event_date         timestamp without time zone NOT NULL,
    created_on         timestamp without time zone NOT NULL,
    published_on       timestamp without time zone,
    lat                double precision            NOT NULL,
    lon                double precision            NOT NULL,
    paid               boolean                     NOT NULL,
    participant_limit  integer                     NOT NULL,
    confirmed_requests integer                     NOT NULL,
    request_moderation boolean                     NOT NULL,
    title              varchar(120)                NOT NULL,
    initiator_id       integer                     NOT NULL,
    state              varchar(32)                 NOT NULL,
    CONSTRAINT fk_category_id FOREIGN KEY (category_id) REFERENCES category (id),
    CONSTRAINT fk_user_id FOREIGN KEY (initiator_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS request
(
    id           BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created      timestamp without time zone NOT NULL,
    event_id     integer                     NOT NULL,
    requester_id integer                     NOT NULL,
    status       varchar(32)                 NOT NULL,
    CONSTRAINT fk_event_id FOREIGN KEY (event_id) REFERENCES event (id),
    CONSTRAINT fk_requester_id FOREIGN KEY (requester_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS compilation
(
    id     BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    pinned boolean     NOT NULL,
    title  varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS compilation_events
(
    compilation_id BIGINT NOT NULL,
    events_id      BIGINT NOT NULL,
    CONSTRAINT fk_compilation_id FOREIGN KEY (compilation_id) REFERENCES compilation (id) ON DELETE CASCADE,
    CONSTRAINT fk_event_id FOREIGN KEY (events_id) REFERENCES event (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS location
(
    id     BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name   varchar(255)     NOT NULL,
    lat    double precision NOT NULL,
    lon    double precision NOT NULL,
    radius float            NOT NULL
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist      float = 0;
        rad_lat1  float;
        rad_lat2  float;
        theta     float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * ((lon1 - lon2) / 180);
            -- находим длину ортодромии
            dist = sin(pi() * lat1 / 180) * sin(pi() * lat2 / 180) +
                   cos(pi() * lat1 / 180) * cos(pi() * lat2 / 180) * cos(pi() * ((lon1 - lon2) / 180));

            IF dist > 1
            THEN
                dist = 1;
            END IF;

            dist = acos(sin(pi() * lat1 / 180) * sin(pi() * lat2 / 180) +
                        cos(pi() * lat1 / 180) * cos(pi() * lat2 / 180) * cos(pi() * ((lon1 - lon2) / 180)));
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;